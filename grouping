#!/bin/bash

test -z "$GROUPING_HOME"  && GROUPING_HOME=`dirname $0`
test -z "$KYUPI_HOME"     && KYUPI_HOME=$GROUPING_HOME/../kyupi
test -z "$KYUPI_MEMORY"   && KYUPI_MEMORY=4096

export GROUPING_HOME
export KYUPI_HOME
export KYUPI_MEMORY

export KYUPI_VMARGS="-server -verbose:gc -Dfile.encoding=UTF8  $KYUPI_VMARGS"

#
# set CLASSPATH
#

if [ -f "$KYUPI_HOME/lib/commons-cli-1.0.jar" ]; then
  cli=$KYUPI_HOME/lib/commons-cli-1.0.jar
  log4j=$KYUPI_HOME/lib/log4j-1.2.17.jar
  junit=$KYUPI_HOME/lib/junit-4.12.jar
  hamcrest=$KYUPI_HOME/lib/hamcrest-core-1.3.jar
  compress=$KYUPI_HOME/lib/commons-compress-1.4.1.jar
  bin=$KYUPI_HOME/bin:$GROUPING_HOME/bin
  export CLASSPATH=$bin:$log4j:$cli:$hamcrest:$junit:$compress
else
  echo "KyuPI distribution not found in directory '$KYUPI_HOME'."
  echo "Set the variable KYUPI_HOME to the directory which contains the distribution."
  exit 1
fi

#
# First command line argument determines start class
#

app_package="jp.ac.kyutech.ci.grouping"
app_path="jp/ac/kyutech/ci/grouping"
base=$GROUPING_HOME

#
# Compile, if only sources are found
#

if [ ! -f "$base/bin/$app_path/Main.class" ]; then
  if [ -f "$base/src/$app_path/Main.java" ]; then
    echo "Compiling sources from $base/src to $base/bin ..."
    mkdir -p $base/bin
    find $base/src -name *.java |xargs javac -encoding UTF-8 -d $base/bin
  else
    echo "Neither sources nor class files found in directory '$base'."
    echo "Set the variable GROUPING_HOME to the directory which contains bin/$app_path/Main.class or src/$app_path/Main.java."
    exit 1
  fi
fi


#
# Start Java process
#

cmd="java $KYUPI_VMARGS -DKyuPI.home=$KYUPI_HOME -Xmx${KYUPI_MEMORY}m -Xms${KYUPI_MEMORY}m $app_package.Main"
exec $cmd "$@"
